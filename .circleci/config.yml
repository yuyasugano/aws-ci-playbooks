# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Each job requires specifying an executor(either docker, macos, or machine),
# see circleci.com/docs/2.0/executor-types/ for a comparison and more examples.
executors:
  docker-executor: # provision a docker image and install terraform
    docker:
      - image: circleci/python:3.6.2
    environment:
      TERRAFORM_VER: 0.12.6
      AWS_DEFAULT_REGION: ap-northeast-1
  terraform-executor:
    docker:
      - image: hashicorp/terraform:0.12.6
    environment:
      AWS_DEFAULT_REGION: ap-northeast-1

jobs:
  default-plan-apply:
    working_directory: main/
    executor: terraform-executor
    parallelism: 1
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${TF_KEY}" -backend-config="region=${TF_REGION}"
      - run:
          name: terraform workspace
          command: |
            terraform workspace new default
            terraform workspace select default
      - run:
          name: terraform plan
          command: terraform plan -var-file=terraform.tfvars.default
      - persist_to_workspace:
          root: .
          paths:
            - .
  default-apply:
    working_directory: main/
    executor: terraform-executor
    parallelism: 1
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            terraform apply -var-file=terraform.tfvars.default -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .
  default-plan-destroy:
    working_directory: main/
    executor: terraform-executor
    parallelism: 1
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            terraform plan -destroy -var-file=terraform.tfvars.default
      - persist_to_workspace:
          root: .
          paths:
            - .
  default-destroy:
    working_directory: main/
    executor: terraform-executor
    parallelism: 1
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            terraform destroy -var-file=terraform.tfvars.default -auto-approve 
  build:
    executor: docker-executor
    parallelism: 1
    steps:
      - checkout
      - run:
          name: install terraform
          command: |
            if [[ ! -f ~/.local/bin/terraform ]]; then
              mkdir -p ~/.local/bin & cd ~/.local/bin
              curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VER}/terraform_${TERRAFORM_VER}_linux_amd64.zip
              unzip -o terraform_${TERRAFORM_VER}_linux_amd64.zip
            fi
      - run:
          name: move binary
          command: sudo cp -fR ~/.local/bin/* /usr/local/bin
      - run:
          name: terraform init backend
          command: terraform init -backend-config="bucket=${TF_BUCKET}" -backend-config="key=${TF_KEY}" -backend-config="region=${TF_REGION}"
          working_directory: main/

# Use a package of configuration called an orb.
# orbs:
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
    
# Orchestrate or schedule a set of jobs
workflows:
  version: 2
  # Name the workflow "welcome"
  # welcome:
    # Run the welcome/run job in its own container
    # jobs:
    #   - welcome/run
  plan_approve_apply:
    jobs:
      - default-plan-apply
          filters:
            branches:
              only: master
      - default-hold-apply:
          type: approval
          requires:
            - default-plan-apply
      - default-apply:
          requires:
            - default-hold-apply
          filters:
            branches:
              only: master
      - default-plan-destroy:
          requires:
            - default-apply
          filters:
            branches:
              only: master
      - default-hold-destroy:
          type: approval
          requires:
            - default-plan-destroy
      - default-destroy:
          requires:
            - default-hold-destroy
          filters:
            branches:
              only: master
